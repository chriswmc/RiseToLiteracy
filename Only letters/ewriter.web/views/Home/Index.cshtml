@{
    ViewBag.Title = "Index";
}

<div id='container' style="position:relative; ">
    <canvas id="lines" style="position:absolute; left: 0; top: 0; z-index: 0;"></canvas>
    <canvas id="myCanvas" style="position:absolute; z-index: 1;"></canvas>
</div>
<br />
<button id="submitBtn">Submit</button>
<button id="clearBtn">Clear</button>



<script type="text/javascript">
    $(function () {
        board = {
            isDrawing: false,
            surface: null,

            setup: function () {
                var h = window.innerHeight * 0.75;
                var w = window.innerWidth - 20;
                document.getElementById('container').setAttribute("style", "position:relative; height:" + h + "px; width:" + w + "px;"); // include any other desired style properties

                var myCanvas = document.getElementById('myCanvas');
                // Make it visually fill the positioned parent
                myCanvas.style.width = '100%';
                myCanvas.style.height = '100%';

                // ...then set the internal size to match
                myCanvas.width = myCanvas.offsetWidth;
                myCanvas.height = myCanvas.offsetHeight;

                var lines = document.getElementById('lines');
                // Make it visually fill the positioned parent
                lines.style.width = '100%';
                lines.style.height = '100%';

                // ...then set the internal size to match
                lines.width = myCanvas.offsetWidth;
                lines.height = myCanvas.offsetHeight;

                /* draw handwriting lines */
                var canvas = document.getElementById('lines');
                var context = canvas.getContext('2d');

                var c = 40; // cushion around the lines
                var lineHeight = window.innerHeight * 0.4;

                context.beginPath();
                context.moveTo(c, c); // x, y
                context.lineTo(w - c, c);
                context.stroke();

                context.beginPath();
                context.moveTo(c, lineHeight + c);
                context.lineTo(w - c, lineHeight + c);
                context.stroke();

                context.beginPath();
                context.moveTo(c, lineHeight / 2 + c);
                context.lineTo(w - c, lineHeight / 2 + c);
                context.setLineDash([15]);
                context.stroke();
                /* end handwriting lines */

                this.surface = myCanvas.getContext('2d');
                this.surface.lineWidth = 5;
                this.surface.strokeStyle = '#0000ff';
                this.surface.fillStyle = "#0000ff";
            },

            beginDraw: function (x, y) {
                this.surface.beginPath();
                this.surface.moveTo(x, y);

                this.surface.fillRect(x - 3, y - 3, 6, 6); // dot

                this.isDrawing = true;
            },

            draw: function (x, y) {
                this.surface.lineTo(x, y);
                this.surface.stroke();
            },

            endDraw: function () {
                this.isDrawing = false;
            }
        };

        var strokesHistory = {
            Strokes: []
        };

        var currentStroke = {
            Points: []
        };
        board.setup();

        var myCanvas = document.getElementById('myCanvas');

        myCanvas.onmousedown = myCanvas.ontouchstart = function (e) {
            var xy = getInputCoordinates(e);

            currentStroke.Points.push({ X: xy.x, Y: xy.y });

            board.beginDraw(xy.x, xy.y);
        };

        myCanvas.onmousemove = myCanvas.ontouchmove = function (e) {
            if (board.isDrawing === true) {
                var xy = getInputCoordinates(e);

                currentStroke.Points.push({ X: xy.x, Y: xy.y });
                board.draw(xy.x, xy.y);
            }
        };

        myCanvas.onmouseup = myCanvas.ontouchend = function (e) {
            strokesHistory.Strokes.push(currentStroke);
            currentStroke = { Points: [] };
            board.endDraw();
        };

        function getInputCoordinates(e) {
            var x, y;

            if (e.changedTouches) {
                var touchData = e.changedTouches[0];
                x = touchData.clientX;
                y = touchData.clientY;
                e.preventDefault();
            }
            else {
                x = e.clientX;
                y = e.clientY;
            }

            return { x: x, y: y };
        }

        $('#submitBtn').click(function () {
            $.post('/home/recognize',
                   { strokes: JSON.stringify(strokesHistory) },
                   function (result) {
                       //The following line is what gets rid of the spaces
                       result = result.replace(/ /g, "");
                       alert(result);

                   });
        });

        $('#clearBtn').click(function () {
            strokesHistory = { Strokes: [] };
            var c = document.getElementById("myCanvas");
            board.surface = c.getContext("2d");
            board.surface.clearRect(0, 0, myCanvas.width, myCanvas.height);
            //location.reload(); // another option
        });

        window.addEventListener('resize', resizeCanvas, false);
        window.addEventListener('orientationchange', resizeCanvas, false);

        function resizeCanvas() {
            var temp_cnvs = document.createElement('canvas');
            var temp_cntx = temp_cnvs.getContext('2d');
            temp_cnvs.width = window.innerWidth - 20; // same as sizes as in board.setup()
            temp_cnvs.height = window.innerHeight / 2;
            temp_cntx.drawImage(myCanvas, 0, 0);

            board.setup();

            board.surface.drawImage(temp_cnvs, 0, 0);
        }
    });
</script>